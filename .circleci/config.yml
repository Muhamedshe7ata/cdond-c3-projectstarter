version: 2.1

commands:
  install_awscli:
    description: Install AWS cli
    steps:
      - run:
          name: Install AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
     steps:
       - run:
           name: Install Ansible
           command: |
             sudo apt update
             sudo apt install software-properties-common -y
             sudo apt-add-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible -y
  install_nodejs:
    steps:
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs

  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        # Add parameter here
        workflow_id:
          default: "${CIRCLE_WORKFLOW_ID:0:7}"
          type: string
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              # Your code here
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/GihzLn9tKaSBumwtTTinRhb/migration_<<parameters.workflow_id>>")
            if(( ${SUCCESS}==1 )); then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
       
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run back-end tests
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-scan]

      - run:
          name: Run front-end security scan
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical || true
            # npm update jest webpack webpack-dev-server html-loader axios ts-jest postcss webpack-cli babel-loader
            
            # npm audit fix --force
            # npm audit --audit-level=critical 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
     docker:
      - image: circleci/node:13.8.0
     steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-scan]

      - run:
          name: Run  back-end security scan
          command: |
            cd backend
            npm install
            
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

          
  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              cd .circleci/ansible
              cat inventory.txt
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
              cat inventory.txt
              # export BACKEND_IP=$(aws ec2 describe-instances \
              #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
              #   --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              #   --output text
              # )
              # echo ${BACKEND_IP}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    working_directory: ~/project
    resource_class: medium
    
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:FJogcncZoAfN0hgvqhqDgAiiOafEii9G+HsAStU+Ok4" # Replaced fingerprint
      - attach_workspace:
          at: ~/
      - install_ansible
 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            
            ansible-playbook -i inventory.txt configure-server.yml -vvv
      # - destroy-environment

  run-migrations:
      docker:
        - image: cimg/node:18.18.2
      steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install AWS CLI
          command: |
            sudo apt update
            sudo apt install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install

      - run:
          name: Install Dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Build Project
          command: |
            cd backend
            npm run build

      - run:
          name: Run Migrations
          command: |
            cd backend
            npm run migrations > migrations.txt 2>&1
            cat migrations.txt

      - run:
          name: Check Migration Success and Update KVDB
          command: | 
               if grep -q "has been executed successfully." ~/project/backend/migrations.txt
               then
               curl --insecure https://kvdb.io/Ui2YdCvJYVfFjmoeDVk3hE/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
               fi
       
      # - destroy-environment # This seems to be calling another job or command
      # - revert-migrations # This seems to be calling another job or command   
       

 
  deploy-frontend:
    docker:
      - image: cimg/node:18.18.2
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/

      - install_nodejs
      - install_awscli
      - install_ansible
       
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm audit fix || true
            npm install
            npm run build || true
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations    
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - add_ssh_keys:
            fingerprints:
              - "SHA256:FJogcncZoAfN0hgvqhqDgAiiOafEii9G+HsAStU+Ok4"
      - attach_workspace:
          at: ~/
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli

      # Frontend smoke test is now first
      - run:
          name: Frontend smoke test
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            echo "Frontend Website URL: ${FRONTEND_WEBSITE}"
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              echo "Frontend smoke test PASSED: 'Welcome' found on the page."
              exit 0
            else
                echo "Frontend smoke test FAILED: 'Welcome' not found on the page or could not connect."
                exit 1
            fi

      # Backend smoke test is now second
      - run:
          name: Backend smoke test
          command: |
            #!/bin/bash -eo pipefail

            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} "Name=instance-state-name,Values=running"\
              --query 'Reservations[*].Instances[*].PublicIpIpAddress' \
              --output text)

            if [ -z "$BACKEND_PUBLIC_IP" ]; then
              echo "Error: Could not find running backend EC2 instance with the CloudFormation stack-name tag."
              exit 1
            fi

            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "Found Backend Public IP: ${BACKEND_PUBLIC_IP}"

            max_retries=15
            delay=10

            echo "Attempting to connect to ${API_URL}/api/status..."

            for i in $(seq 1 $max_retries); do
                echo "Retry $i of $max_retries: Connecting to ${API_URL}/api/status ..."

                CURL_OUTPUT=$(curl -v -f -m 30 -o - "${API_URL}/api/status" 2>&1) || true
                CURL_EXIT_CODE=$?

                echo "--- Curl Output (Attempt $i, Exit Code ${CURL_EXIT_CODE}) ---"
                echo "${CURL_OUTPUT}"
                echo "-----------------------------------------------------"

                if [ ${CURL_EXIT_CODE} -eq 0 ]; then
                    if echo "${CURL_OUTPUT}" | grep -q "ok"; then
                         echo "Smoke test PASSED: Found 'ok' in response after retry $i."
                         exit 0
                    else
                         echo "Smoke test FAILED on attempt $i: Curl connected (exit code 0), but 'ok' not found in response body. Check logs above."
                    fi
                elif [ ${CURL_EXIT_CODE} -eq 7 ]; then
                    echo "Connection FAILED (curl exit code 7: Couldn't connect to host) on attempt $i. Retrying in ${delay}s..."
                elif [ ${CURL_EXIT_CODE} -eq 28 ]; then
                    echo "Connection FAILED (curl exit code 28: Operation timed out) on attempt $i. Retrying in ${delay}s..."
                else
                    echo "Curl FAILED with unexpected exit code ${CURL_EXIT_CODE} on attempt $i. Check logs above for full curl output. Retrying in ${delay}s..."
                fi

                if [ $i -lt $max_retries ] && [ ${CURL_EXIT_CODE} -ne 0 ] ; then
                    sleep $delay
                fi
            done

            echo "Backend smoke test FAILED after ${max_retries} retries."
            exit 1

      # - destroy-environment:
      #     when: always
      # - revert-migrations:
      #     when: always
    
#  
#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dep / Save Old Workflow ID to kvdb.io
#           command: |
#             export OLD_WORKFLOW_ID=$(aws cloudformation \
#               list-exports --query 'Exports[?Name==\'WorkflowID\'].Value' \
#               --no-paginate --output text)
#             echo "Old Workflow ID: $OLD_WORKFLOW_ID"
#             curl https://kvdb.io/GihzLn9tKaSBumwtTTinRhb/old_workflow_id -d "${OLD_WORKFLOW_ID}"
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --stack-name InitialStack
#       - destroy-environment
#       - revert-migrations

# # cleanup:
# #     docker:
# #       # Docker image here
# #     steps:
# #       # Checkout code from git
# #       - run:
# #           name: Get old stack workflow id
# #           command: |
# #             # your code here
# #             export OldWorkflowID="the id here"
# #             export STACKS=[] #put the list of stacks here
# #       - run:
# #           name: Remove old stacks and files
# #           command: |
# #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
# #             then
# #               # your code here
# #             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend]

      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      
      
