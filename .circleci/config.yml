version: 2.1

commands:
  install_ansible:
     steps:
       - run:
           name: Install Ansible
           command: |
             sudo apt update
             sudo apt install software-properties-common -y
             sudo apt-add-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible -y
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        # Add parameter here
        workflow_id:
          default: "${CIRCLE_WORKFLOW_ID:0:7}"
          type: string
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              # Your code here
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/GihzLn9tKaSBumwtTTinRhb/migration_<<parameters.workflow_id>>")
            if(( ${SUCCESS}==1 )); then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
       
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run back-end tests
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-scan]

      - run:
          name: Run front-end security scan
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical || true
            # npm update jest webpack webpack-dev-server html-loader axios ts-jest postcss webpack-cli babel-loader
            
            # npm audit fix --force
            # npm audit --audit-level=critical 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
     docker:
      - image: circleci/node:13.8.0
     steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-scan]

      - run:
          name: Run  back-end security scan
          command: |
            cd backend
            npm install
            
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

          
  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              cd .circleci/ansible
              cat inventory.txt
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
              cat inventory.txt
              # export BACKEND_IP=$(aws ec2 describe-instances \
              #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
              #   --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              #   --output text
              # )
              # echo ${BACKEND_IP}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:FJogcncZoAfN0hgvqhqDgAiiOafEii9G+HsAStU+Ok4" # Replaced fingerprint
      - attach_workspace:
          at: ~/
      - install_ansible # This seems like a custom step or orb job
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt # This line is likely for debugging/verification
            ansible-playbook -i inventory.txt configure-server.yml -vvv
            timeout: 30m
 
      - run:
          name: Run migrations on EC2 instance via SSH
          command: |
            # Get the Public IP of the backend instance using the latest stack name
            # This assumes the backend stack name includes the workflow ID suffix
            BACKEND_STACK_NAME="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            # Add --region if not set globally in your CircleCI config
            PUBLIC_IP=$(aws ec2 describe-instances \
              --region eu-north-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
              --output text
            )

            if [ -z "$PUBLIC_IP" ]; then
              echo "Error: Could not get Public IP for backend instance from stack ${BACKEND_STACK_NAME}"
              # Exit with error if the IP is not found
              exit 1
            fi

            echo "Found backend EC2 Public IP: ${PUBLIC_IP}"

            # Use the SSH key provided by CircleCI add_ssh_keys step
            SSH_KEY_PATH="~/.ssh/id_rsa"

            # Determine the SSH user (ubuntu or ec2-user) - matches the user in Ansible playbook
            SSH_USER="ubuntu" # Change to ec2-user if that's correct for your AMI

            # Define the path where project code was copied by Ansible
            PROJECT_REMOTE_PATH="/home/${SSH_USER}/project" # Matches project_remote_path in Ansible

            # Command to execute remotely on the EC2 instance
            # Navigate to backend, source the environment file, then run npm install and migrations
            # Using 'bash -c' to ensure the commands run in a bash shell that sources the environment
            REMOTE_COMMAND="cd ${PROJECT_REMOTE_PATH}/backend && source myenv.sh && npm install && npm run migrations"

            echo "Executing remote command: ${REMOTE_COMMAND}"

            # Execute the command via SSH. -o StrictHostKeyChecking=no is used to avoid interactive prompts.
            # Add -t if you need a pseudo-terminal (sometimes helpful for interactive commands, but not usually needed for npm/shell scripts)
            ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} ${SSH_USER}@${PUBLIC_IP} "${REMOTE_COMMAND}"

            echo "Migrations command finished."

# Remove the original run-migrations job definition from your workflow section
# and any steps that referred to it (like destroy-environment or revert-migrations if they were linked there)      

  # run-migrations:
  #   docker:
  #     # Docker image here that supports Node.js
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration results to kvdb
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             curl --insecure https://kvdb.io/$Ui2YdCvJYVfFjmoeDVk3hE/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
  #           fi
  #     - destroy-environment # This seems to be calling another job or command
  #     - revert-migrations # This seems to be calling another job or command   

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #    #########################################
      ###### requires: [cloudfront-update]
